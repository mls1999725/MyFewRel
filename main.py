# -*- coding: utf-8 -*-
"""relation extraction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U54jqMyd69k5-20XV0gv-pTIp2k_zu31
"""

# !pip install transformers
from fewshot_re_kit.data_loader import get_loader, get_loader_unsupervised
from models.gnn import GNN
from models.d import Discriminator
from fewshot_re_kit.framework import FewShotREFramework
from fewshot_re_kit.sentence_encoder import BERTSentenceEncoder, CNNSentenceEncoder
import torch
from torch import optim, nn
import numpy as np
import json
import argparse
import os

trainN = 5
N = 5
K = 5
Q = 5
batch_size = 4
max_length = 128
na_rate = 0
hidden_size = 230

print("{}-way-{}-shot Few-Shot Relation Classification".format(N, K))
print("max_length: {}".format(max_length))

model_name = 'gnn'
encoder_name = 'cnn'
pretrain_ckpt = 'bert-base-uncased'
if encoder_name == 'cnn':
        try:
                glove_mat = np.load('./pretrain/glove/glove_mat.npy')
                glove_word2id = json.load(open('./pretrain/glove/glove_word2id.json'))
        except:
                raise Exception("Cannot find glove files. Run glove/download_glove.sh to download glove files.")
        sentence_encoder = CNNSentenceEncoder(
                glove_mat,
                glove_word2id,
                max_length)
# sentence_encoder = BERTSentenceEncoder(pretrain_ckpt, max_length)
train = 'train_wiki'
val = 'val_wiki'
# adv = 'pubmed_unsupervised'
adv = None

train_data_loader = get_loader(train, sentence_encoder, N=N, K=K, Q=Q, na_rate=na_rate, batch_size=batch_size)
val_data_loader = get_loader(val, sentence_encoder, N=N, K=K, Q=Q, na_rate=na_rate, batch_size=batch_size)
optim = optim.Adam
prefix = '-'.join([model_name, encoder_name, train, val, str(N), str(K)])
ckpt = 'checkpoint/{}.pth.tar'.format(prefix)
val_step = 2000
train_iter = 30000
val_iter = 1000
test_iter = 10000
model = GNN(sentence_encoder, N)
bert_optim = False

if adv:
    adv_data_loader = get_loader_unsupervised(adv, sentence_encoder, N=trainN, K=K, Q=Q,
                                              na_rate=na_rate, batch_size=batch_size)
    d = Discriminator(hidden_size)
    framework = FewShotREFramework(train_data_loader, val_data_loader, None, adv_data_loader, adv, d)
    prefix += '-adv_' + adv

else:
    framework = FewShotREFramework(train_data_loader, val_data_loader, None)

framework.train(model, prefix, batch_size, trainN, N, K, Q, pytorch_optim=optim, 
        load_ckpt=None, na_rate=na_rate, val_step=val_step, fp16=None, pair=None,
        train_iter=train_iter, val_iter=val_iter, bert_optim=bert_optim)

acc = framework.eval(model, batch_size, N, K, Q, test_iter, na_rate=na_rate, ckpt=ckpt, pair=None)
print("RESULT: %.2f" % (acc * 100))

